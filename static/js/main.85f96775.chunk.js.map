{"version":3,"sources":["redux/actions/todo.js","redux/actionTypes/todo.js","utils.js/string.js","widget/button.js","containers/todo.js","containers/page2.js","containers/page3.js","components/header.js","redux/reducer/todo.js","redux/reducer/index.js","redux/store/index.js","App.js","routes/routes.js","serviceWorker.js","index.js"],"names":["addTodo","payload","dispatch","type","deleteTodo","strim","str","replace","ButtonDiv","styled","button","_templateObject","Todo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInput","e","value","target","setState","produce","draft","todo","addTodosubmit","state","todoAction","id","Date","text","deletTodoSubmit","_this2","todos","length","todoList","map","o","index","react_default","a","createElement","key","className","onClick","role","onChange","renderTodoList","Component","defaultProps","connect","bindActionCreators","todoActions","Page2","changeColor","color","name","_this$state","style","borderColor","concat","borderWidth","borderStyle","Header","children","Fragment","react_router_dom","to","initialState","reducer","arguments","undefined","action","toConsumableArray","filter","redux_reducer","history","combineReducers","router","connectRouter","createBrowserHistory","basename","process","store","preloadedState","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","logger","createLogger","REACT_APP_ENV","createStore","createRootReducer","applyMiddleware","thunk","routerMiddleware","stores","routes","header_Header","react_router","exact","path","component","Page3","App","es","dist","esm","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.85f96775.chunk.js","sourcesContent":["import * as types from '../actionTypes/todo';\n\n// export const addTodo = payload => ({\n//     type: types.ADD_TODO,\n//     payload,\n// });\n\n// 使用async，必須設置applyMiddleware\nexport const addTodo = payload => dispatch => dispatch({ type: types.ADD_TODO, payload });\n\n// 可參考下列寫法\n// export const xxx = () => (dispatch) => {\n//     dispatch({ type: REQUEST_ROBOT_PENDING});\n//     fetch('https://xxxxx.xxx.xx')\n//     .then(res => res.json())\n//     .then(data => dispach({ type: REQUEST_ROBOT_SUC}, payload: data))\n//     .catch( err => dispach({ type: REQUEST_ROBOTERR}, payload: err) )\n// }\n\nexport const deleteTodo = payload => ({\n    type: types.DELETE_TODO,\n    payload,\n});\n","export const ADD_TODO = 'ADD_TODO';\nexport const DELETE_TODO = 'DELETE_TODO';\n","export const strim = str => str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n","import styled from 'styled-components';\n\nexport const ButtonDiv = styled.button`\n    cursor: pointer;\n    padding: 5px 10px;\n    border: 1px solid #000;\n    cursor: pointer;\n    text-align: center;\n    margin-left: 10px;\n    background-color: #fff;\n`;\n","import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as todoActions from '../redux/actions/todo';\nimport '../style/scss/index.scss';\nimport { strim } from '../utils.js/string';\nimport { ButtonDiv } from '../widget/button';\nimport produce from 'immer';\n\nclass Todo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            todo: '',\n        };\n    }\n\n    handleInput = e => {\n        // this.setState({\n        //     todo: e.target.value,\n        // });\n        const { value } = e.target;\n        this.setState(\n            produce(draft => {\n                draft.todo = value;\n            })\n        );\n    };\n\n    addTodosubmit = () => {\n        const { todo } = this.state;\n        if (strim(todo) === '') {\n            return;\n        }\n\n        const { todoAction } = this.props;\n\n        todoAction.addTodo({ id: new Date() / 1, text: todo });\n\n        // this.setState({\n        //     todo: '',\n        // });\n        this.setState(\n            produce(draft => {\n                draft.todo = '';\n            })\n        );\n    };\n\n    deletTodoSubmit = id => {\n        const { todoAction } = this.props;\n        todoAction.deleteTodo(id);\n    };\n\n    renderTodoList() {\n        const { todo } = this.props;\n        const { todos } = todo;\n        if (todos.length > 0) {\n            const todoList = todos.map((o, index) => (\n                <div key={o.id} className=\"wrapper-row list\">\n                    <h5>\n                        {index + 1}. {o.text}\n                    </h5>\n                    <div className=\"delete\" onClick={() => this.deletTodoSubmit(o.id)} role=\"presentation\">\n                        x\n                    </div>\n                </div>\n            ));\n            return <div className=\"wrapper-col\">{todoList}</div>;\n        }\n    }\n\n    render() {\n        const { todo } = this.state;\n        return (\n            <div className=\"wrapper-col index\">\n                <h1>Redux Todo List</h1>\n                <div className=\"wrapper-row\">\n                    <input className=\"input\" type=\"text\" onChange={this.handleInput} value={todo} />\n                    <ButtonDiv onClick={this.addTodosubmit}>submit</ButtonDiv>\n                </div>\n                {this.renderTodoList()}\n            </div>\n        );\n    }\n}\n\nTodo.defaultProps = {\n    todo: {},\n    todoAction: {},\n};\n\nTodo.propTypes = {\n    todo: PropTypes.object,\n    todoAction: PropTypes.object,\n};\n\nconst mapStateToProps = state => ({\n    todo: state.todo,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    todoAction: bindActionCreators(todoActions, dispatch),\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Todo);\n","import React, { Component } from 'react';\n\nexport default class Page2 extends Component {\n    render() {\n        return (\n            <div className=\"wrapper-col index\">\n                <h1>Page2</h1>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport produce from 'immer';\nimport { ButtonDiv } from '../widget/button';\n\nexport default class Page2 extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            color: 'pink',\n            name: 'click',\n        };\n    }\n\n    changeColor = () => {\n        this.setState(\n            produce(draft => {\n                draft.color = '#000';\n                draft.name = 'yoyoyo';\n            })\n        );\n    };\n\n    render() {\n        const { color, name } = this.state;\n        return (\n            <div className=\"wrapper-col index\">\n                <h1 style={{ borderColor: `${color}`, borderWidth: '3px', borderStyle: 'solid' }}>Page3</h1>\n                <ButtonDiv onClick={this.changeColor}>{name}</ButtonDiv>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nexport default class Header extends Component {\n    render() {\n        const { children } = this.props;\n        return (\n            <>\n                <div className=\"wrapper-row index\">\n                    <Link to=\"/todo\">todo</Link>\n                    <Link to=\"/page2\">page2</Link>\n                    <Link to=\"/page3\">page3</Link>\n                </div>\n                <div>{children}</div>\n            </>\n        );\n    }\n}\n\nHeader.defaultProps = {\n    children: {},\n};\n\nHeader.propTypes = {\n    children: PropTypes.object,\n};\n","import * as actionTypes from '../actionTypes/todo';\n// import update from 'immutability-helper';\nimport produce from 'immer';\n\n// inital\nconst initialState = {\n    todos: [],\n};\n\n/* immer */\nconst reducer = produce((draft = initialState, action = {}) => {\n    switch (action.type) {\n        case actionTypes.ADD_TODO: {\n            draft.todos = [...draft.todos, action.payload];\n            return;\n            // return draft;\n            // 這兩種都可以\n        }\n        case actionTypes.DELETE_TODO: {\n            const { payload } = action;\n            draft.todos = draft.todos.filter(o => payload !== o.id);\n            return;\n        }\n        default:\n            return draft;\n    }\n});\n\n/* immutability-helper\nconst reducer = (state = initialState, action = {}) => {\n    switch (action.type) {\n        case actionTypes.ADD_TODO: {\n            return update(state, {\n                todos: { $set: [...state.todos, action.payload] },\n            });\n        }\n        case actionTypes.DELETE_TODO: {\n            const { payload } = action;\n            const data = state.todos.filter(o => payload !== o.id);\n            return update(state, {\n                todos: { $set: data },\n            });\n        }\n        default:\n            return state;\n    }\n};\n */\n\nexport default reducer;\n","import { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\nimport todo from './todo';\n\nexport default history =>\n    combineReducers({\n        router: connectRouter(history),\n        todo,\n    });\n","import { createBrowserHistory } from 'history';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport thunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport createRootReducer from '../reducer';\n\nexport const history = createBrowserHistory({ basename: process.env.PUBLIC_URL });\n\n// 判斷要不要開啟REDUX_DEVTOOLS\nexport default function configureStore(preloadedState) {\n    let store = '';\n    const composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n    const logger = createLogger();\n    if (process.env.REACT_APP_ENV === 'dev') {\n        // store = createStore(reducer, applyMiddleware(thunkMiddleware, logger));\n        store = createStore(\n            createRootReducer(history),\n            preloadedState,\n            composeEnhancer(applyMiddleware(thunk, routerMiddleware(history), logger))\n        );\n    } else {\n        store = createStore(createRootReducer(history), preloadedState, applyMiddleware(thunk));\n    }\n    return store;\n}\n","import React from 'react';\nimport './App.css';\nimport createRoutes from './routes/routes';\n// import { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport stores, { history } from './redux/store';\nimport { Normalize } from 'styled-normalize';\nimport { ConnectedRouter } from 'connected-react-router';\n\n// 建立store\nconst store = stores();\n// 建立路由\nconst routes = createRoutes();\n\nconst App = () => (\n    <Provider store={store}>\n        <Normalize />\n        <ConnectedRouter history={history}>{routes}</ConnectedRouter>\n    </Provider>\n);\n\nexport default App;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Todo from '../containers/todo';\nimport Page2 from '../containers/page2';\nimport Page3 from '../containers/page3';\nimport Header from '../components/header';\n\nexport default function createRoutes() {\n    return (\n        <Header>\n            <Switch>\n                <Route exact path=\"/todo\" component={Todo} />\n                <Route exact path=\"/page2\" component={Page2} />\n                <Route exact path=\"/page3\" component={Page3} />\n                <Route path=\"/\" component={Todo} />\n            </Switch>\n        </Header>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    // console.log(\n                    //     'This web app is being served cache-first by a service ' +\n                    //         'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    // );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            // console.log(\n                            //     'New content is available and will be used when all ' +\n                            //         'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            // );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            // console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            // console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            // console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}